{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Concepts","text":""},{"location":"#modules","title":"Modules","text":"<ul> <li>When a python script is run by passing it as a command to the Python interpreter (<code>python myscript.py</code>), all of the code that is at indentation level 0 gets executed. <ul> <li>Code for functions and classes that are defined do not get executed.</li> </ul> </li> <li>The dunder attibute <code>__name__</code> returns the value <code>__main__</code> when a python script is invoked directly<ul> <li>It returns the name of the package when accessed after being imported in a different module</li> </ul> </li> </ul>"},{"location":"#variables","title":"Variables","text":"<p>We can check for local variables and global variables with the <code>locals()</code> and <code>globals()</code> functions.</p> <p>Globals and Locals</p> <pre><code># Print a dictionary of all global variables\nprint(globals())\n# Print all keys for the global variables dictionary\nprint(globals().keys())\n# Print the value of the global variable 'globalvar1'\nprint(globals()['globalvar1'])\n\n# Print all local variables\nprint(locals())\n</code></pre>"},{"location":"#functions","title":"Functions","text":""},{"location":"#map-filter-and-lambda","title":"Map, Filter and Lambda","text":"<p>Map:  Allows you to \"map\" a function to an iterable object such as list. It applies the function to all the elements in the iterable. <pre><code>def get_len(strVal):\n    return len(strVal) \n\nlstStr = ['Test','String','Length']\n\n# Apply the function to each elelment in the list and return a list of the output values\nlist(map(get_len, lstStr))\n# Returns [4,6,6]\n</code></pre></p> <p>Filter:  Applies a filter function to an interable object and returns the values filtered based on the function.  <pre><code>def get_even(num):\n    return num % 2 == 0 \n\nnums = [1,2,3,4,5,6,7,8,9]\n\n# Apply the function to each elelment in the list and return a list of the output values\nlist(filter(get_even, nums))\n# Returns [2,4,6,8]\n</code></pre></p> <p>Lambda:  Single line adhoc function.  <pre><code># With Map\nlstStr = ['Test','String','Length']\nlist(map(lambda x: len(x) , lstStr))\n# Returns [4,6,6]\n\n# With Filter\nnums = [1,2,3,4,5,6,7,8,9]\nlist(filter(lambda x: x % 2 == 0 , nums))\n# Returns [2,4,6,8]\n</code></pre></p>"},{"location":"#loops","title":"Loops","text":"<p>While vs For</p> <ul> <li>Use a \u201cfor\u201d loop when there are a known set of items to iterate over. </li> <li>Use a \u201cwhile\u201d loop when the number of iterations is not known in advance.</li> </ul>"},{"location":"#else-for-loops","title":"Else for Loops","text":"<ul> <li>Used when using <code>break</code> within a loop to check some condition and exit the loop</li> <li>If the loop ends normally without the break being called, control passes to an optional else <pre><code>while condition:\n    optionally do something\n    if condition:\n        break\n# The following will be executed if the while loop never breaks\nelse:\n    do something\n</code></pre> <pre><code>for condition:\n    optionally do something\n    if condition:\n        break\n# The following will be executed if the for loop never breaks\nelse:\n    do something\n</code></pre></li> </ul>"},{"location":"#break-and-continue","title":"Break and Continue","text":"<ul> <li>break: Breaks out of the current closest enclosing loop</li> <li>continue: Goes to the top of the closest enclosing loop</li> </ul>"},{"location":"#decorators","title":"Decorators","text":"<p>Decorators are functions which modify the functionality of another function.</p> <ul> <li>These take a function as a parameter and execute it. </li> <li>It also executes some code before and / or after the original function that is passed as a parameter.</li> </ul> <pre><code>def sample_decorator(func_to_decorate):   # Only function name (without paranthesis()) is passed as parameter.\n\n    def wrapper_func():\n        print(\"Optional code to execure before executing the function to be decorated\")\n\n        func_to_decorate()  # Function passed as parameter is executed\n\n        print(\"Optional code to execure after executing the function to be decorated\")\n\n    return wrapper_func\n\n@sample_decorator\ndef func_to_decorate():\n    print(\"This function will be decorated\")\n\n# The @sample_decorator above reassigns func_to_decorate as below\n# func_to_decorate = sample_decorator(func_to_decorate)\n\n# This will run the decorated code\nfunc_to_decorate()\n</code></pre>"},{"location":"#generators","title":"Generators","text":"<p>Generators allow us to generate as we go along, instead of holding everything in memory and hence is more memory-efficient. <pre><code># Sample generator function to print n numbers\ndef generate_numbers(n):\n    for num in range(n):\n        # yield one number at a time instead of saving the entire output in memory \n        # and returning it all at one\n        yield num  \n\n# Print 100 numbers one at a time\nfor i in generate_numbers(100):\n    print(i)\n\n# Get the output in a list\nlist(generate_numbers(100))\n</code></pre></p>"},{"location":"#user-interactions","title":"User Interactions","text":"<ul> <li> <p><code>input</code>: Used to get user inputs</p> <ul> <li>Input is visible as regular text <pre><code>user_input = input(\"Some text prompting for user input: \").strip()\n</code></pre></li> </ul> </li> <li> <p><code>getpass</code>: Used to get secure inputs</p> <ul> <li>Input is masked</li> <li>If the variable used to capture the input is printed, it will print in clear text <pre><code>import getpass\nuser_input = getpass.getpass(\"Some text prompting for user input: \")\n</code></pre></li> </ul> </li> </ul>"},{"location":"#error-handling","title":"Error Handling","text":"<p>Try-Except-Else-Finally with While</p> <pre><code>while True:\n    try:\n        # do something\n    except:\n        # execute if error\n        continue  # execute the while loop again\n    else:\n        # execute if there is no error\n        break  # break the while loop\n    finally:\n        # execute each time the statement in the try section is run\n        # irrespective of if there is an error or not\n        # this will execute even though there is a break statement in else\n</code></pre>"},{"location":"#testing","title":"Testing","text":""},{"location":"#general-code-structure-and-style","title":"General Code Structure and Style","text":"<p>Pylint: A simple tool that test the code for style as well as some very basic program logic and generates a detailed report and a rating. <pre><code>pylint python_file_name.py\n</code></pre></p>"},{"location":"#unit-testing","title":"Unit Testing","text":"<p>Used to write tests that send sample data to your program, and compare what's returned to a desired outcome.</p> <p>unittest: Built in python module that supports test automation, sharing of setup and shutdown code for tests, aggregation of tests into collections, and independence of the tests from the reporting framework.</p> <pre><code>import unittest\nimport file_to_be_tested  # import the python file to be tested\n\nclass TestFileToTest(unittest.TestCase):\n    # Define test functions\n    def test_one(self):\n        # do something\n        expected_value = 'some value'\n\n        # call the function to be tested from the python file\n        result = file_to_be_tested.function_to_test(params_if_any)\n\n        # Check if the return value is as expected\n        self.assertEqual(result, expected_value)\n\n    def test_two(self):\n        # do something\n        another_expected_value = 'some value'\n\n        # call the function to be tested from the python file\n        second_result = file_to_be_tested.second_function_to_test(params_if_any)\n\n        # Check if the return value is as expected\n        self.assertEqual(second_result, another_expected_value)\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre> <p>doctest: Built in python module that searches for pieces of text that look like interactive Python sessions, and then executes those sessions to verify that they work exactly as shown.</p>"},{"location":"#debugging","title":"Debugging","text":""},{"location":"#python-debugger","title":"Python Debugger","text":"<ul> <li>Implements an interactive debugging environment for Python programs</li> <li>Includes features to pause the program, look at the values of variables, and watch program execution step-by-step</li> <li>Alternative to adding a bunch of print statements for debugging</li> <li>Type <code>q</code> to quit the pdb debugging <pre><code>import pdb\n\n# python code\n\n# Set a trace using Python Debugger\npdb.set_trace()\n\n# python code continued\n</code></pre></li> </ul>"},{"location":"bas_snip/","title":"Snippets","text":""},{"location":"bas_snip/#strings","title":"Strings","text":"<p><pre><code># Reverse word\nword[::-1]\n\n# Check if a string ends with a certain character/string\nword.endswith('&lt;char or string to test&gt;')\n</code></pre> <pre><code># Print all letters in the alphabet\nstring.ascii_lowercase\n</code></pre> <pre><code># Capitalize the first alphabet of the first word in a sentence\ntext.capitalize()\n\n# Capitalize the first alphabet of the all words in a sentence\ntext.title()\n</code></pre> <pre><code># String check methods\nisalnum() # returns True if all characters are alphanumeric\n\nisalpha() # returns True if all characters are alphabetic\n\nislower() # returns True if all cased characters are lowercase and there is at least one cased character\n\nisupper() # returns True if all cased characters are uppercase and there is at least one cased character\n\nisspace() # returns True if all characters are whitespace\n\nistitle() # returns True if the string is title cased and there is at least one character\n</code></pre></p>"},{"location":"bas_snip/#variables","title":"Variables","text":"<pre><code># Get value of a variable whose name is stored in another variable\n\n# variable whose value we want to get\nvar1Path = \"Path for var1\"  \nvar2Path = \"Path for var2\"  \n\n# derived variable whose value depends on another temporary variable 'tempVar'\n# it will result in the name of one of the varibales above\n# for example, if tempVar = \"var1\", derivedVar will be \"var1Path\"\nderivedVar = f\"{tempVar}Path\" \n\n# get the value of var1Path or var2Path\nglobals()[derivedVar] \n</code></pre>"},{"location":"bas_snip/#lists","title":"Lists","text":"<p><pre><code># Remove items in a list from another list\nfiltered_list = list(set(src_list).difference(remove_list))\n</code></pre> <pre><code># Sorting\na_list = ['1', '5', '9', '11', '2', '100', '4']\n# sort as if item is a string\na_list.sort()\n# ['1', '100', '11', '2', '4', '5', '9']\n\n# determine sort postition based on int value\na_list.sort(key=int)\n# ['1', '2', '4', '5', '9', '11', '100']\n\nb_list = [\"Ajay\", \"basic\", \"Barnie\", \"alice\"]\n# sort alpha with uppercase\nb_list.sort()\n# ['Ajay', 'Barnie', 'alice', 'basic']\n\n# sort but ignore uppercase\nb_list.sort(key=str.lower)\n# ['Ajay', 'alice', 'Barnie', 'basic']\n</code></pre></p>"},{"location":"bas_snip/#dictionaries","title":"Dictionaries","text":"<pre><code># Get value from a dict key\nc = {}\nc.get('some key',&lt;default_value&gt;) # returns the default_value if the key is not present\n\n# The above can be achived using defaultdict as well\nfrom collections import defaultdict\nd = defaultdict(lambda: &lt;default_value&gt;)\nd['some key']\n\n\n# Print first n items in a dict\nfrom itertools import islice\nlist(islice(my_dict.items(), n))\n</code></pre>"},{"location":"bas_snip/#sets","title":"Sets","text":"<p><pre><code># Create a set\ns1 = s2 = set()\ns1 = {1,1,2,3,4,4,5}    # printing s1 returns {1,2,3,4,5}\n\n# Add an element\nset1.add(&lt;element to add&gt;)\n\n# Remove an element\nset1.discard(&lt;element to remove&gt;)\n\n# Union of two sets. Returns a new set which is the union of the two sets\nset1.union(set2)\n\n# Updates set1 with the union of set 1 and 2\nset1.update(set2)\n\n# Empty a set\nset1.clear()\n</code></pre> <pre><code># Set comparison methods\n\nset1.difference(set2)    # Returns elements in set1 that are not present in set2\n\nset1.difference_update(set2)    # Return all elements in a set after removing matching elements from another set\n\nset1.symmetric_difference(set2)    # Returns all elements present in only one of the two sets\n\nset1.intersection(set2)    # Intersection between two sets\n\nset1.intersection_update(set2)    # Return all elements in a set with matching elements from another set\n\nset1.isdisjoint(set2) # Returns True if there is no common element between the two sets\n\nset1.issubset(set2)    # Check if set1 is a subset of set2\n\nset1.issuperset(set2)    # Check if set1 is a superset of set2\n</code></pre></p>"},{"location":"bas_snip/#functions","title":"Functions","text":"<p><pre><code># Pass arbitrary number of args to function\ndef myFunc(*args):\n    return list(args)\n</code></pre> <pre><code># Convert a list of numbers to string\nlist(map(str,input_list))\n</code></pre></p>"},{"location":"bas_snip/#loops","title":"Loops","text":"<pre><code># Make loops show a smart progress meter\nfrom tqdm import tqdm\ntqdm(iterable)\n</code></pre>"},{"location":"bas_snip/#generators","title":"Generators","text":"<p><pre><code>def generate_fibonnaci(n):\n    \"\"\"\n    Generate a fibonnaci sequence up to n\n    \"\"\"\n    a = 1\n    b = 1\n    for i in range(n):\n        yield a\n        a,b = b,a+b\n\n# Print the first five fibonacci numbers\nfor i in generate_fibonnaci(5):\n    # the for loop calls the next() function behind the scenes\n    print(i)\n</code></pre> <pre><code># Convert iterable such as string to iterator\niter(string_iterable)\n</code></pre></p>"},{"location":"file/","title":"File Operations","text":""},{"location":"file/#file-system","title":"File System","text":""},{"location":"file/#traversal","title":"Traversal","text":"<pre><code>import os\n# Get current working directory\npath = os.getcwd()\n\n# List contents of the current directory\nos.listdir(path)\n\n# Check if a subdirectory exist in a given directory\nif os.path.exists('.'):\n  subpathexists = True\n\n# Go to the parent directory\nos.chdir('../')\n\n# List all csv files in current directory and all subdirectories\ndirpath = 'path to traverse'\nfor (dir_path, dir_names, file_names) in os.walk(dirpath):\n    for file in file_names:\n        if file.lower().endswith('.csv'):\n            print(os.path.join(dir_path, file))\n</code></pre>"},{"location":"file/#copy-and-move","title":"Copy and Move","text":"<pre><code>import shutil  # Shell Utility\n# Copy directory from one location to another\n# If the destination dir exists and dirs_exist_ok is set to False (which is the default), an error is raised\nshutil.copytree(\"&lt;src path&gt;\", \"&lt;destination path&gt;\", dirs_exist_ok=True)\n\n# Move file\nshutil.move(\"&lt;src path&gt;/&lt;filename&gt;\", \"&lt;destination path&gt;\")\n</code></pre>"},{"location":"file/#deletions","title":"Deletions","text":"<pre><code># Delete a file at the given path \nos.unlink(path) \n\n# Delete a folder (must be empty) at the given path\nos.rmdir(path) \n</code></pre>"},{"location":"file/#send2trash","title":"send2trash","text":"<ul> <li>Can be used to send file to trash</li> <li>Better than the <code>shutil.rmtree(path)</code> alternative <ul> <li>Files deleted using this cannot be recovered <pre><code>import send2trash\nsend2trash.send2trash('file_to_delete')\n</code></pre></li> </ul> </li> </ul>"},{"location":"file/#compression","title":"Compression","text":"<p><pre><code># Zipping a single file\nimport zipfile\n# Create a zip file\nzipped_file_name = zipfile.ZipFile('zip_file.zip','w')\n# Add files to the zip file\nzipped_file_name.write(\"file_to_zip.txt\",compress_type=zipfile.ZIP_DEFLATED)\nzipped_file_name.close()\n\n# Extracting zip file contents\nzipped_obj = zipfile.ZipFile('zip_file.zip','r')\nzipped_obj.extractall(\"unzipped_folder_name\")\n</code></pre> <pre><code># Zipping a folder\nimport shutil\n# compresses the content folder_to_zip to a file called zip_file_name.zip\nshutil.make_archive(zip_file_name,'zip',folder_to_zip)  \n\n# Extracting the zipped folder\nshutil.unpack_archive(zipped_file_name,folder_name_to_extract_to,'zip')\n</code></pre></p>"},{"location":"file/#file-read-and-write","title":"File Read and Write","text":""},{"location":"file/#csv-reader-writer","title":"csv reader &amp; writer","text":"<pre><code>import csv\n\n# Reading files\ndata = open('file.csv',encoding=\"utf-8\")\ncsv_data = csv.reader(data,delimiter=',')\ndata_lines = list(csv_data)    \n# this is a list of lists\n# each row of csv is represented as a list\n\n# Write to new file\noutput_file = open('new_file.csv','w',newline='')\ncsv_writer = csv.writer(output_file,delimiter=',')\n# write a single line\ncsv_writer.writerow(['val1','val2','val3'])\n# write multiple rows\ncsv_writer.writerows([['val1','val2','val3'],['val4','val5','val6']])\noutput_file.close()\n\n# append to existing file\ncurr_file = open('existing_file.csv','a',newline='')\ncsv_writer = csv.writer(curr_file)\ncsv_writer.writerow(['val1','val2','val3'])\ncurr_file.close()\n</code></pre>"},{"location":"img/","title":"Concepts","text":"<p>Tip</p> <p>When working with images, Jupyter Notebook may sometimes show a warning related to the IOPub data rate </p> <p>To get rid of the warning, stop the notebook and restart it with <pre><code>jupyter notebook --NotebookApp.iopub_data_rate_limit=1.0e10\n</code></pre></p>"},{"location":"img/#pillow","title":"pillow","text":"<p>Remember</p> <p>Image coordinates start at top left hand side, i.e. (x,y) = (0,0) on top left</p> <ul> <li>x-coordinate increases from left to right</li> <li>y-coordinate increases from top to bottom</li> </ul> <pre><code># Open Image file\n# Since we are writing images, we need to use binary mode\nmy_img = Image.open('&lt;Image name with path&gt;','rb')\n# Show the image\nmy_img.show()\n# Save image\nmy_img.save('&lt;Image name with path&gt;')\n\n# Get image details\nmy_img.size    # Returns a tuple of (width, height)\nmy_img.filename    # Image file name\nmy_img.format_description   # Image format\n\n# Get RGB color details\nr, g, b = my_img.getpixel((0, 0))\n\n# Adding alpha layer to image\nmy_image.putalpha(alphavalue)\nr, g, b, a = my_img.getpixel((0, 0))\n\n# Cropping Images\nmy_img.crop((start_x, start_y, width, height))\n\n# Pasting images\n&lt;target_image&gt;.paste(im=&lt;src_image&gt;,box=(x_pos,y_pos))\n# Masking one image with another\n&lt;target_image&gt;.paste(&lt;mask_image&gt;,box=(x_pos,y_pos), mask=&lt;mask_image&gt;)\n\n# Resize images\nmy_img.resize((resize_height,resize_width))\n\n# Rotate images\nmy_img.rotate(&lt;degree_to_rotate&gt;)\n</code></pre>"},{"location":"img_snip/","title":"Snippets","text":"<pre><code># Adding transparency to colors and overlaying colors to create new ones\nfrom PIL import Image\n\n# Open blue image file - rgb(84 166 216)\nblue = Image.open('blue.png')\n# Open brown image file - rgb(109 71 34)\nbrown = Image.open('brown.png')\n\n# Add transparency to the images\nblue.putalpha(210)\nbrown.putalpha(210)\n\n# Overlay one image over other\n# This will result in a new color\nblue.paste(brown, box=(0,0), mask=brown)\n</code></pre>"},{"location":"jup/","title":"Concepts","text":"<p>Tip</p> <p>View list of currently running notebooks or labs along with the corresponding tokens</p> <ul> <li>jupyter notebook list</li> <li>jupyter labs list</li> </ul>"},{"location":"jup/#magic-commands","title":"Magic Commands","text":"<ul> <li>Can be used by default without the percent sign<ul> <li>as long as no variable is defined with the same name as the magic function in question</li> <li>This feature is called automagic and can be enabled or disabled with <code>%automagic</code></li> </ul> </li> </ul> Useful Magic Commands Command Description %cpaste Open a special prompt for manually pasting Python code to be executed %debug Enter the interactive debugger at the bottom of the last exception traceback %hist Print command input (and optionally output) history %load FILENAME Loads the file in the current cell %magic Display detailed documentation for all of the available magic commands %page OBJECT Pretty-print the object and display it through a pager %paste Execute preformatted Python code from clipboard %pdb Automatically enter debugger after any exception %prunstatement Execute statement with cProfile and report the profiler output %quickref Display the IPython Quick Reference Card %reset Delete all variables/names defined in interactive namespace %runscript.py Run a Python script inside IPython %%timeit Calc time taken to run a python code snippet %timeitstatement Run a statement multiple times to compute an ensemble average execution time; useful for timing code with very short execution time %timestatement Report the execution time of a single statement %who, %who_ls, %whos Display variables defined in interactive namespace, with varying levels of information/verbosity %xdelvariable Delete a variable and attempt to clear any references to the object in the IPython internals"},{"location":"jup/#widgets","title":"Widgets","text":"<p>Tip</p> <p>If the widgets don't display correctly, follow the steps here to ensure all relevant libraries are installed.</p>"},{"location":"jup/#interact","title":"Interact","text":"<ul> <li>Passing a function with an integer or float argument or range to interact creates a slider</li> <li>Default step size is 1 for integers and 0.1 for floats</li> <li>When specifying <code>min and max</code> or <code>min, max and step</code> as the widget arguments, the default value can be set in the function definition</li> <li>We can also specify the min, max, step and default in the function itself<ul> <li>Interact can be called just with the function name in this case</li> <li>When used as a decorator, no parameters are needed in this case</li> </ul> </li> </ul> <p>Usage</p> <pre><code># Without specifying min, max, step and default in the function\n# Create a slider\ninteract(function_name, x=intval) \ninteract(function_name, x=(min,max)) \ninteract(function_name, x=(min,max,step)) \n# The above invokes the IntSlider widget in the following form\ninteract(function_name, x=widgets.IntSlider(min=-intval,max=3 * intval,step=1,value=intval))\n\n# With min, max, step and default specified in the function\n# Create a slider\ninteract(function_name)\n</code></pre> Sample Code <pre><code>from ipywidgets import interact, fixed, interact_manual\nimport ipywidgets as widgets\n\n# Sample function\ndef f(x):\n    return x\n\n# Slider\ninteract(f, x=10) \n\n# Specify min, max, step and val for the slider explicitly\ninteract(f, x=widgets.IntSlider(min=-100,max=100,step=5,value=0))\n\n# Checkbox\ninteract(f, x=True)\n\n# Textarea\ninteract(f, x='Hello')\n\n# Dropdown\ninteract(f, x=['listval1','listval2'])\n\n# Dropdown - displays dict key in dropdown and return value corresponding to selection\ninteract(f, x={'key1':val1,'key2':val2})\n\n\n\n# Sample function with default value\ndef g(x=14):\n    return x\n\n# Specify min and max for the slider explicitly\ninteract(g, x=(10,15)) \n# Specify min, max and step for the slider explicitly\ninteract(g, x=(10,20,2)) \n\n# Sample function with min, max, step and default values\ndef g1(x=14):  # same as def g1(x:14)\n    return x\ndef g1(x=(10,20)):  # same as def g1(x:(10,20))\n    return x\ndef g1(x=(10,20,2)):  # same as def g1(x:(10,20,2))\n    return x\ndef g1(x=widgets.IntSlider(min=-100,max=100,step=5,value=0)):  # same as def g1(x:idgets.IntSlider(min=-100,max=100,step=5,value=0))\n    return x\n\ninteract(g1)\n</code></pre> Using interact as decorator <pre><code># function name is not passed as argument when using interact as a decorator\n@interact\ndef f(x:10):\n    return x\n\n@interact(x=widgets.IntSlider(min=-100,max=100,step=5,value=0))\ndef f(x):\n    return x\n\n@interact\ndef f(x:widgets.IntSlider(min=-100,max=100,step=5,value=0)):\n    return x\n</code></pre> <p>The function <code>fixed</code> can be used to fix the value of arguments. <pre><code># Here even though there are two arguments, only one interactive widget is displayed\n@interact\ndef f(x=5, y=fixed(10)):\n    return (x,y)\n</code></pre></p>"},{"location":"jup/#interactive","title":"Interactive","text":"<ul> <li>Used if there is a need to reuse the widgets</li> <li>Returns a <code>Widget</code> instance rather than immediately displaying the widget<ul> <li>Use IPython's <code>display</code> function to display the widget</li> </ul> </li> </ul> <pre><code>from ipywidgets import interactive, fixed\nimport ipywidgets as widgets\nfrom IPython.display import display\n\ndef f(x:widgets.IntSlider(min=-100,max=100,step=5,value=0), y:10):\n    return (x,y)\n\nw = interactive(f)\n\n# Display the widget(s)\ndisplay(w)\n\n# Print the widgets being used\nw.children\n# Returns\n# (IntSlider(value=0, description='x', min=-100, step=5),\n#  IntSlider(value=10, description='y', max=30, min=-10),\n#  Output())\n\n# Get the results\n# Rerun this after every interaction with the widgets\nw.result \n# Returns (0, 10)\n\n# Get the arguments and values as a dict\nw.kwargs\n# Returns {'x': 0, 'y': 10}\n\n# Close the widget\nw.close()\n\n# Once the widget is closed, display return the text representation of the widget\ndisplay(w)\n# returns interactive(children=(IntSlider(value=0, description='x', min=-100, step=5), IntSlider(value=10, description='y', max=30, min=-10), Output()), _dom_classes=('widget-interact',))\n# w.children, w.result and w.kwargs return the normal outputs\n</code></pre>"},{"location":"jup/#standalone-widgets","title":"Standalone Widgets","text":"<ul> <li>Displayed using the <code>display()</code> method</li> <li>Values are accessed using the <code>value</code> property</li> </ul> <pre><code>import ipywidgets as widgets\nfrom IPython.display import display\n\n# Create an integer slider\nw = widgets.IntSlider()\n# Create a float slider\nw = widgets.FloatSlider()\n# Create acheckbox\nw = widgets.Checkbox()\n# Create a text widget\nw = widgets.Text()\n# Create a textarea\nw = widgets.Textarea()\n\n# Display the widget\ndisplay(w)\n# Interact with the widgets and access the value using the value property\nw.value\n\n# Pass disabled parameter or set disabled property to False to disable the widget\nw = widgets.IntSlider(disabled=False)\n# Enable the widget\nw.disabled = False\n\n# Initialize with default value\nw = widgets.Text(value='Hello', disabled=True)\n\n# View the full list of available properties\nw.keys\n\n# Linking widgets - Cannot link more than two widgets at a time\na = widgets.FloatText()    # widgets.Text() also works\nb = widgets.FloatSlider()\ndisplay(a,b)\n\nwidgetlink = widgets.jslink((a, 'value'), (b, 'value'))\n\n# Unlinking widgets\nwidgetlink.unlink()\n</code></pre>"},{"location":"jup_snip/","title":"Snippets","text":"<pre><code># Print dataframe using html in middle of a code chunk (Jupyter)\nfrom IPython.display import display, HTML\ndisplay(HTML(df.describe().to_html()))\n</code></pre> <pre><code># Display image from url\nfrom IPython.display import Image\nImage(url='http://i.stack.imgur.com/GbJ7N.png')\n</code></pre>"},{"location":"mail/","title":"Emails","text":""},{"location":"mail/#sending-mails-using-smtplib","title":"Sending Mails using smtplib","text":"<p>Pre-Requisites</p> <ul> <li>Configure email account as needed for use with python api calls<ul> <li>For gmail follow instructions here</li> </ul> </li> <li>Find the smtp details for the mail client</li> </ul> <p>Tip</p> <p>When specifying the port for creating the smtp object, if the msa port 587 results in an error, try using the smtps port 465. Port 587 uses TLS encryption</p> <pre><code>import smtplib\nimport getpass\n\n# Create SMTP object\nserver = smtplib.SMTP('smtp.gmail.com', 587)\n# Establish connection\n# Returns a tuple - If the first value in the tuple is 250\n# it indicates a successful connection\nserver.ehlo()\n# Returns (250, b'smtp.gmail.com at your service, [185.187.168.189]\\nSIZE 35882577\\n8BITMIME\\nSTARTTLS\\nENHANCEDSTATUSCODES\\nPIPELINING\\nCHUNKING\\nSMTPUTF8')\n\n# If using port 587, put connection in TLS mode\nserver.starttls()\n# Returns (220, b'2.0.0 Ready to start TLS')\n\n# Should call the ehlo method again after the starttls method\nserver.ehlo()\n# Returns (250, b'smtp.gmail.com at your service, [185.187.168.189]\\nSIZE 35882577\\n8BITMIME\\nAUTH LOGIN PLAIN XOAUTH2 PLAIN-CLIENTTOKEN OAUTHBEARER XOAUTH\\nENHANCEDSTATUSCODES\\nPIPELINING\\nCHUNKING\\nSMTPUTF8')\n\n# Get email and password\nemail = input(\"Enter your email: \")\npassword = getpass.getpass(\"Enter account password: \")\n\n# Login\nserver.login(email, password)\n# Returns (235, b'2.7.0 Accepted')\n\n# Get message details\nfrom_address = email\nto_address = input(\"Enter the email of the recipient: \")\nsubject = input(\"Enter the subject: \")\nmessage = input(\"Enter the message to send: \")\nmsg = \"Subject: \" + subject + '\\n' + message\n\n# Send email\nserver.sendmail(from_address,to_address,msg)\n# Returns {}\n\nserver.quit()\n</code></pre> Using WITH statement <p>When using the <code>WITH</code> statement, the SMTP QUIT command is issued automatically when the <code>WITH</code> statement exits <pre><code>import smtplib\nwith smtplib.SMTP('smtp.gmail.com', 587) as server:\n    server.ehlo()\n    server.starttls()\n    server.ehlo()\n    server.login(email, password)\n    server.sendmail(from_address,to_address,msg)\n</code></pre></p> Using SSL <ul> <li>Using <code>SMTP_SSL()</code> initiates a TLS-encrypted connection </li> <li>Default context of ssl validates the host name and its certificates<ul> <li>Optimizes the security of the connection <pre><code>import smtplib, ssl\ncontext = ssl.create_default_context()\nwith smtplib.SMTP_SSL('smtp.gmail.com', 465, context=context) as server:\n    server.login(email, password)\n    server.sendmail(from_address,to_address,msg)\n</code></pre></li> </ul> </li> </ul>"},{"location":"mail/#receiving-mails-with-imaplib","title":"Receiving Mails with imaplib","text":"<p>IMAP Search Criteria Documentation <pre><code>import imaplib\nimport email\n\n# Create IMAP object\nM = imaplib.IMAP4_SSL('imap.gmail.com')\n# Login\nM.login(email,password)\n# Returns ('OK', [b'xxxxxxxxxxxx@gmail.com authenticated (Success)'])\n\nM.list()\n# Returns list of all folders and subfolders:\n# b'(\\\\HasChildren) \"/\" \"ParentFolder1\"'\n# b'(\\\\HasNoChildren) \"/\" \"ParentFolder1/ChildFolder1\"'\n# b'(\\\\HasNoChildren) \"/\" \"ParentFolder1/ChildFolder2\"'\n# b'(\\\\HasNoChildren) \"/\" \"ParentFolder2\"'\n# b'(\\\\HasNoChildren) \"/\" \"INBOX\"'\n# b'(\\\\HasChildren \\\\Noselect) \"/\" \"[Gmail]\"'\n# b'(\\\\All \\\\HasNoChildren) \"/\" \"[Gmail]/All Mail\"'\n# b'(\\\\Drafts \\\\HasNoChildren) \"/\" \"[Gmail]/Drafts\"'\n# b'(\\\\HasNoChildren \\\\Important) \"/\" \"[Gmail]/Important\"'\n# b'(\\\\HasNoChildren \\\\Sent) \"/\" \"[Gmail]/Sent Mail\"'\n# b'(\\\\HasNoChildren \\\\Junk) \"/\" \"[Gmail]/Spam\"'\n# b'(\\\\Flagged \\\\HasNoChildren) \"/\" \"[Gmail]/Starred\"'\n# b'(\\\\HasNoChildren \\\\Trash) \"/\" \"[Gmail]/Trash\"'\n\n# Select the folder to check for mail\nM.select(\"inbox\")\n# Returns ('OK', [b'9285'])\n\n# Search for the email\ntyp,data = M.search(None,'SUBJECT \"Python Mail Test\"')\ntyp\n# Returns 'OK'\ndata\n# Returns [b'9285']\n\n# Fetch the search result\n# RFC822 is the message format\n# See https://datatracker.ietf.org/doc/html/rfc822.html\nresult, email_data = M.fetch(data[0],\"(RFC822)\")\nraw_email = email_data[0][1]\nraw_email\n# Returns b'Bcc: xxxxxx@gmail.com\\r\\nReturn-Path: &lt;xxxxxx@gmail.com&gt;\\r\\nReceived: from 1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa ([185.187.168.189])\\r\\n        by smtp.gmail.com with ESMTPSA id xxxx-yyyy.164.2024.11.27.19.03.01\\r\\n        for &lt;xxxxxx@gmail.com&gt;\\r\\n        (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);\\r\\n        Wed, 27 Nov 2024 19:03:02 -0800 (PST)\\r\\nMessage-ID: &lt;aaaa.bbbb.cccc.dddd.google.com&gt;\\r\\nDate: Wed, 27 Nov 2024 19:03:02 -0800 (PST)\\r\\nFrom: xxxxxx@gmail.com\\r\\nSubject: Python Mail Test\\r\\n\\r\\nThis is a test\\r\\n'\n\n# Set encoding and extract the email body\nraw_email_string = raw_email.decode('utf-8')\nemail_message = email.message_from_string(raw_email_string)\nfor part in email_message.walk():\n    if part.get_content_type() in [\"text/plain\",\"text/html\"]:\n        body = part.get_payload(decode=True)\n        print(body)\n# Returns\n# Part: text/plain\n# b'This is a test\\r\\n'\n\nM.close()\n# Returns ('OK', [b'Returned to authenticated state. (Success)'])\nM.logout()\n# Returns ('BYE', [b'LOGOUT Requested'])\n</code></pre></p> Using WITH statement <p>When using the <code>WITH</code> statement, the IMAP4 LOGOUT command is issued automatically when the <code>WITH</code> statement exits <pre><code>import imtplib\nwith imaplib.IMAP4_SSL('imap.gmail.com') as M:\n    M.login(email,password)\n    M.select(\"inbox\")\n    typ,data = M.search(None,'SUBJECT \"Python Mail Test\"')\n    result, email_data = M.fetch(data[0],\"(RFC822)\")\n    raw_email = email_data[0][1]\n    raw_email\n</code></pre></p>"},{"location":"regex/","title":"Regular Expressions","text":""},{"location":"regex/#common-methods","title":"Common methods","text":"<p><pre><code>import re\n\nsource = \"To be or not to be, that is to be the question\"\n</code></pre> <pre><code># checks whether the source string begins with the pattern\nre.match(pattern, source)\n\nre.match(\"to be\", source)\n# does not return anything\nre.match(\"To be\", source)\n# returns &lt;re.Match object; span=(0, 5), match='To be'&gt;\n</code></pre> <pre><code># return the first match\nre.search(pattern, source)\n\nre.search(\"to be\", source)\n# returns &lt;re.Match object; span=(13, 18), match='to be'&gt;\n</code></pre> <pre><code># return a list of all nonoverlapping matches\nre.findall(pattern, source)\n\nre.findall(\"to be\", source)\n# returns ['to be', 'to be']\n</code></pre> <pre><code># iterate source and find match objects\nre.finditer(pattern, source)\n\nfor match in re.finditer(\"to be\", source):\n    print(match.span()) \n</code></pre> <pre><code># precompile regex for performance gains. \nregex_pattern = re.compile(pattern)\nre.search(regex_pattern,source)\n\nregex_pattern = re.compile(\"to be\")\nre.search(regex_pattern,source)\n# returns &lt;re.Match object; span=(13, 18), match='to be'&gt;\n</code></pre> <pre><code># Precompile with named patterns\nregex_pattern = re.compile(r'(?P&lt;pattern_name1&gt;pattern1)(?P&lt;pattern_name2&gt;pattern2)')\n\nregex_pattern = re.compile(r\"(?P&lt;my_pattern_one&gt;\\w{2})\\s(?P&lt;my_pattern_two&gt;\\w{2})\\s\")\nresult = re.search(regex_pattern,source)\nresult.group(\"my_pattern_two\")\n# returns 'be'\n</code></pre> <pre><code># return a list of strings that were split from the source string at the locations where the pattern was found\nre.split(regex_pattern,source)\n\nre.split(regex_pattern,source)\n# returns ['To be or not ', ', that is ', ' the question']\n</code></pre> <pre><code># return a string that has replaced instances of the pattern with a replacement string passed into the function\n# number of instances replaced can be specified using count\nre.sub(replacement, source[, count=0])\n\nregex_pattern.sub(\"it is\", source)\n# returns 'To be or not it is, that is it is the question'\nregex_pattern.sub(\"it is\", source, count=1)\n# returns 'To be or not it is, that is to be the question'\n</code></pre></p> <p>Tip</p> <p>The identifier, specifier and quantifier based regex patterns should be enclosed with r (<code>r\"regex_pattern\"</code>). This is called a raw string literal. It is similar to a regular string literal, but Python won't replace any characters when it is interpreted. For example, \"\\b\" will remain as it is, instead of being replaced by a backspace character.</p>"},{"location":"regex/#identifiers","title":"Identifiers","text":"Pattern Description Anti-Pattern Description \\d A single digit \\D A single non-digit \\w An alphanumeric character \\W A non-alphanumeric character \\s A whitespace character \\S A non-whitespace character \\b A word boundary (between a \\w and a \\W, in either order) \\B A non-word boundary <p><pre><code>import re\n\nsource = \"One of my phone numbers is (333) 666-9999 and the other one is (666) 999-1313\"\n</code></pre> <pre><code>re.search(r'\\d{4}', source)\n# returns &lt;re.Match object; span=(35, 39), match='9999'&gt;\nre.search(r'\\D{4}', source)\n# returns &lt;re.Match object; span=(0, 4), match='One '&gt;\n</code></pre> <pre><code>re.search(r'\\w{4}', source)\n# returns &lt;re.Match object; span=(10, 14), match='phon'&gt;\nre.search(r'\\W{2}', source)\n# returns &lt;re.Match object; span=(3, 4), match=' ('&gt;\n</code></pre> <pre><code>re.search(r'\\snumbers\\s', source)\n# returns &lt;re.Match object; span=(15, 24), match=' numbers '&gt;\nre.search(r'\\snumber\\S', source)\n# returns &lt;re.Match object; span=(15, 23), match=' numbers'&gt;\n</code></pre> <pre><code># \\b&lt;pattern&gt;\\B is similar to \\s&lt;pattern&gt;\\S except that unlike the \\s&lt;pattern&gt;\\S pattern \n# it does not include the characters matching the \\s and \\S patterns\nre.search(r'\\bnumber\\b', source)\n# does not return anything. No occurence of 'number surrounded by space\nre.search(r'\\bnumbers\\b', source)\n# returns &lt;re.Match object; span=(16, 23), match='numbers'&gt;\nre.search(r'\\bnumber\\B', source)\n# returns &lt;re.Match object; span=(16, 22), match='number'&gt;\n</code></pre></p>"},{"location":"regex/#specifiers-and-quantifiers","title":"Specifiers and Quantifiers","text":"Pattern Description { m } m consecutive matches of the pattern { m, n } m to n consecutive matches of the pattern, as many as possible { m, n }? m to n consecutive matches of the pattern, as few as possible . Any single character except \\n ^ Starts with given pattern $ Ends with given pattern ? Zero or one matches of the pattern * Zero or more matches of the pattern, as many as possible *? Zero or more matches of the pattern, as few as possible + One or more matches of the pattern, as many as possible +? One or more matches of the pattern, as few as possible ( pattern ) Retunrs pattern match. Mostly used to make the regex pattern more readable pattern1 | pattern2 pattern1 or pattern2 [ abc ] a or b or c (same as a [^ abc ] not (a or b or c) prev (?= next ) prev if followed by next prev (?! next ) prev if not followed by next (?&lt;= prev ) next next if preceded by prev (?&lt;! prev ) next next if not preceded by prev <p><pre><code>import re\n\nsource = \"One of my phone numbers is (333) 666-9999. (666) 999-1313 is the other one.\"\n</code></pre> <pre><code>re.search(r'\\d{2,5}', source)\n# returns &lt;re.Match object; span=(28, 31), match='333'&gt;\nre.search(r'\\d{2,5}?', source)\n# returns &lt;re.Match object; span=(28, 30), match='33'&gt;\n</code></pre> <pre><code># Wildcard\nre.search(r'\\s\\d{3}.', source)\n# returns &lt;re.Match object; span=(32, 37), match=' 666-'&gt;\n\n# Starts With\nre.search(r'^One', source)\n# returns &lt;re.Match object; span=(0, 3), match='One'&gt;\n\n# End With\nre.search(r'\\W$', source)\n# returns &lt;re.Match object; span=(73, 74), match='.'&gt;\n</code></pre> <pre><code>re.search(r'\\W\\d', source)\n# returns &lt;re.Match object; span=(27, 29), match='(3'&gt;\nre.search(r'\\W\\d?', source)\n# returns &lt;re.Match object; span=(3, 4), match=' '&gt;\nre.search(r'\\W\\d*', source)\n# returns &lt;re.Match object; span=(3, 4), match=' '&gt;\nre.search(r'\\W\\d*?', source)\n# returns &lt;re.Match object; span=(3, 4), match=' '&gt;\nre.search(r'\\W\\d+', source)\n# returns &lt;re.Match object; span=(27, 31), match='(333'&gt;\nre.search(r'\\W\\d+?', source)\n# returns &lt;re.Match object; span=(27, 29), match='(3'&gt;\n</code></pre> <pre><code>re.search(r'(\\s)(the)', source)\n# returns &lt;re.Match object; span=(59, 63), match=' the'\nre.search(r'(one|two)', source)\n# returns &lt;re.Match object; span=(12, 15), match='one'&gt;\n\nre.search(r'[\\d\\s\\w]', source)\n# returns re.Match object; span=(0, 1), match='O'&gt;\nre.search(r'[\\d\\s\\w]+', source)\n# returns re.Match object; span=(0, 27), match='One of my phone numbers is '&gt;\nre.search(r'[\\d]+\\s[\\w]+', source)\n# returns re.Match object; span=(52, 59), match='1313 is'&gt;\n\nre.search(r'[^\\d\\s\\w]', source)\n# returns re.Match object; span=(27, 28), match='('&gt;\nre.search(r'[^\\d\\s\\w]+', source)\n# returns re.Match object; span=(27, 28), match='('&gt;\nre.search(r'[^\\d\\w]+', source)\n# returns &lt;re.Match object; span=(3, 4), match=' '&gt;\nre.search(r'[^\\d]+', source)\n# returns re.Match object; span=(0, 28), match='One of my phone numbers is ('&gt;\nre.search(r'[^\\d]+\\s[^\\w]+', source)\n# returns re.Match object; span=(0, 28), match='One of my phone numbers is ('&gt;\n\n# Remove special characters\nre.findall(r'[^\\W]+', source)\n# returns ['One', 'of', 'my', 'phone', 'numbers', 'is', '333', '666', '9999', '666', '999', '1313', 'is', 'the', 'other', 'one']\n' '.join(re.findall(r'[^\\W]+', source))\n# returns 'One of my phone numbers is 333 666 9999 666 999 1313 is the other one'\n</code></pre> <pre><code>re.search(r'\\d{3}(?=-)', source)\n# returns re.Match object; span=(33, 36), match='666'&gt;\nre.search(r'\\d{3}(?!-)', source)\n# returns re.Match object; span=(28, 31), match='333'&gt;\nre.search(r'(?&lt;=\\s)\\w{2}', source)\n# returns re.Match object; span=(4, 6), match='of'&gt;\nre.search(r'(?&lt;!\\s)\\w{2}', source)\n# returns re.Match object; span=(0, 2), match='On'&gt;\n</code></pre></p>"},{"location":"regex/#result-methods","title":"Result Methods","text":"<p><pre><code>result = re.match(pattern, source)\nresult.span()   # returns the tuple (start position, end position)\nresult.start()   # returns the start position of the match\nresult.end()   # returns the end position of the match\nresult.group() # returns the first occurence of the actual text that matched\nresult.groups() # returns all occurences of the actual text that matched\n\n# Multiple patterns and results\nregex_pattern = re.compile(r'(pattern1)(pattern2)(pattern3)')\nresult = re.search(regex_pattern,source)\nresult.group(2) # returns the actual text that matched pattern2\n</code></pre> <pre><code>phone_pattern = re.compile(r'\\W(?P&lt;areacode&gt;\\d{3})\\W\\s(?P&lt;prefix&gt;\\d{3})-(?P&lt;number&gt;\\d{4})')\nresult = re.search(phone_pattern,source)\nresult.group()\n# returns '(333) 666-9999'\nresult.groups()\n# returns ('333', '666', '9999')\nresult.group(1)\n# returns '333'\nresult.group('areacode')\n# returns '333'\n</code></pre></p>"},{"location":"use-mod/","title":"Useful Modules","text":""},{"location":"use-mod/#collections-module","title":"Collections Module","text":""},{"location":"use-mod/#counter","title":"Counter","text":"<ul> <li>A dict subclass which helps count hashable objects </li> <li>Stores elements as dictionary keys and the counts of the objects as the value</li> </ul> <p>Usage</p> <pre><code>from collections import Counter\nCounter(lst)\nCounter('string')\nCounter(sentence.split(' '))\n</code></pre> Sample Code <pre><code>Counter([1,2,2,2,2,3,3,3,4,4,7,7,9,9,9])\n# Returns Counter({2: 4, 3: 3, 9: 3, 4: 2, 7: 2, 1: 1})\n\nCounter('A sample sentence with sample words repeating in the sentence'.split(' '))\n# Returns Counter({'sample': 2,  'sentence': 2,  'A': 1,  'with': 1,  'words': 1,  'repeating': 1,  'in': 1,  'the': 1})\n\nctr = Counter('sshhuffheeehfkkkgsdksd')\nprint(ctr)\n# Returns Counter({'s': 4, 'h': 4, 'k': 4, 'f': 3, 'e': 3, 'd': 2, 'u': 1, 'g': 1})\n\n# convert to a regular dictionary\ndict(ctr)                         # Returns {'s': 4, 'h': 4, 'u': 1, 'f': 3, 'e': 3, 'k': 4, 'g': 1, 'd': 2}\n\nn=3\n# n most common words\nctr.most_common(n)                # Returns [('sample', 2), ('sentence', 2), ('A', 1)]\n\n# n least common elements\nctr.most_common()[:-n-1:-1]       # Returns [('g', 1), ('u', 1), ('d', 2)]\n\n# total of all counts\nsum(ctr.values())                 # Returns 22\n\n# list unique elements\nlist(ctr)                         # Returns ['s', 'h', 'u', 'f', 'e', 'k', 'g', 'd']\n\n# convert to a set\nset(ctr)                          # Returns {'d', 'e', 'f', 'g', 'h', 'k', 's', 'u'}\n\n# convert to a list of (elem, cnt) pairs dict_items\nctr.items()                       # Returns ([('s', 4), ('h', 4), ('u', 1), ('f', 3), ('e', 3), ('k', 4), ('g', 1), ('d', 2)])\n\n# convert from a list of (elem, cnt) pairs\nCounter(dict(ctr.items()))        # Returns Counter({'s': 4, 'h': 4, 'k': 4, 'f': 3, 'e': 3, 'd': 2, 'u': 1, 'g': 1})\n</code></pre>"},{"location":"use-mod/#namedtuple","title":"NamedTuple","text":"<ul> <li>Provides a way to create simple, lightweight data structures similar to a class</li> <li>Does not require defining a full class</li> </ul> <p>Usage</p> <pre><code>from collections import namedtuple\n# Declaring namedtuple\nClassName = namedtuple('ClassName', ['class_attr1', 'class_attr2', 'class_attr3'])\n\n# Adding values\nClassInstance = ClassName('class_attr1_val', 'class_attr2_val', 'class_attr3_val')\n\n# Access using index\nprint(ClassInstance[1])\n\n# Access using name\nprint(ClassInstance.class_attr1)\n</code></pre> Sample Code <pre><code>Movie = namedtuple('Movie', ['actor', 'actress', 'villain'])\nSuhaag = Movie('Amitabh', 'Rekha', 'Amjad')\nprint(Suhaag[1])\nprint(Suhaag.actor)\n</code></pre>"},{"location":"use-mod/#datetime-modules","title":"Datetime Modules","text":""},{"location":"use-mod/#datetime-and-time","title":"datetime and time","text":"<p><pre><code>import datetime\n# Set time 03:33:33\ndatetime.time(3,33,33)\n# Set date 9/9/99\ndatetime.date(9,9,99)\n# Today\ndatetime.date.today()\ndatetime.date.today().year\ndatetime.date.today().month\ndatetime.date.today().day\n\n# Timedelta\nstart=datetime.date(2021,10,1)\nend=datetime.date(2021,10,5)\n# end - start returns timedelta\n(end - start).days\n</code></pre> <pre><code>from datetime import datetime\n# Current date and time\ndatetime.now()\n# Current time\ndatetime.now().time()\ndatetime.now().hour\ndatetime.now().minute\ndatetime.now().second\n# Replace\ndatetime.now().replace(year=1999)\n</code></pre> <pre><code>import time\n# Current time\ntime.time()\n</code></pre></p>"},{"location":"use-mod/#timeit","title":"timeit","text":"<ul> <li>Runs a given snippet of code n number of times and returns the average time taken to run the code <pre><code>import timeit\n\nsetup = '''\ndef sample_func(n):\n    return [str(num) for num in range(n)]\n'''\n\nstmt = '''\nsample_func(n)\n'''\n\ntimeit.timeit(stmt, setup,number=1000000)\n</code></pre></li> </ul>"},{"location":"use-mod/#random-module","title":"Random Module","text":"<pre><code># Random Choice\nfrom random import choice\nvals = ['opt 1','opt 2','opt 3']\nprint(choice(vals))\n\n# Random Shuffle - shuffles values inplace\nfrom random import shuffle\nshuffle(vals)\nprint(vals)\n\nimport random\n# Sample with Replacement\nrandom.choices(population=mylist,k=3)\n# Sample without Replacement\nrandom.sample(population=mylist,k=3)\n</code></pre>"},{"location":"use-mod/#file-operations","title":"File Operations","text":""},{"location":"use-mod/#pypdf","title":"pyPDF","text":"<pre><code>import PyPDF2\n\n# Read the pdf file as a binary file with 'rb'\npdf_file = open('FileName.pdf','rb')\npdf_reader = PyPDF2.PdfReader(pdf_file)\n\n# Get number of pages\nlen(pdf_reader.pages)\n\n# Get contents of first page\nfirst_page = pdf_reader.pages[0]\nfirst_page_content = first_page.extract_text()\n\n# Write to pdf\npdf_write_file = open('WriteFileName.pdf','wb')\npdf_writer = PyPDF2.PdfWriter()\n# Add the first page from the previous pdf\npdf_writer.add_page(first_page)\npdf_writer.write(pdf_write_file)\n\n# Close the files\npdf_file.close()\npdf_write_file.close()\n</code></pre>"},{"location":"web_scr_snip/","title":"Snippets","text":"<p><pre><code># Get names of cast from a wikipedia movie page\nimport requests\nimport bs4\nimport re\n\nresponse = requests.get(\"https://en.wikipedia.org/wiki/Sholay\")\nraw_html = response.text\n\nstructured_html = bs4.BeautifulSoup(raw_html, \"lxml\")\ntag_elements = structured_html.select(\".div-col\")\nfor tag_element in tag_elements:\n    for elements in tag_element.contents:\n        if isinstance(elements, bs4.element.Tag):\n            for element in elements.contents:\n                if isinstance(element, bs4.element.Tag):\n                    print(element.a.contents[0])\n</code></pre> <pre><code># Get all movie poster images from a wikipedia page\nimport requests\nimport bs4\nimport re\n\nresponse = requests.get(\"https://en.wikipedia.org/wiki/Sholay\")\nraw_html = response.text\n\nstructured_html = bs4.BeautifulSoup(raw_html, \"lxml\")\n\nimage_class_elements = structured_html.select(\".mw-file-element\")\nimage_link_dict = {}\nimage_suffix = 'poster.jpg'\n# creat a dict with the image name and url\nfor image_src in image_class_elements:\n    if re.search(r'(poster.jpg)$', image_src['src']):\n        # find the first pattern match ending with 'poster.jpg' and not having '/'\n        image_name = re.search(r'([^/]+)(?=poster.jpg)', image_src['src']).group() + image_suffix\n        image_link_dict[image_name] = 'https:' + image_src['src']\n\n# for all items in the dict, write file to disk\n# Since we are writing images, we need to use binary mode\nfor key, value in image_link_dict.items():\n    print(key, value)\n    with open(key,'wb') as f:\n        f.write(requests.get(value).content)\n</code></pre> <pre><code># Get all unique author names from http://quotes.toscrape.com/\n# Another sample url for practicing web scraping is http://books.toscrape.com/index.html\n\n# Initialize variables\npage_is_valid = True\nauthors = set()\npage = 1\n\n\n# If a page number does not exist, \"No quotes found!\" is dipalyed when trying to access the page\nwhile page_is_valid:\n\n    # Create page url dynammically based on the page number\n    page_url = url+str(page)\n\n    # Obtain Request\n    res = requests.get(page_url)\n\n    # If we try to access a page beyond the last page, \"No quotes found!\" is dipalyed\n    if \"No quotes found!\" in res.text:\n        break\n\n    # Turn into Soup\n    soup = bs4.BeautifulSoup(res.text,'lxml')\n\n    # Add Authors to our set\n    for name in soup.select(\".author\"):\n        authors.add(name.text)\n\n    # Go to Next Page\n    page += 1\n\nprint(f\"Unique list of authors:\\n{authors}\")\n</code></pre></p>"},{"location":"web_scrape/","title":"Concepts","text":""},{"location":"web_scrape/#setup","title":"Setup","text":"<ul> <li>lxml<ul> <li>Library or processing XML and HTML in python</li> </ul> </li> <li>Beautiful Soup<ul> <li>Library for pulling data out of HTML and XML files</li> </ul> </li> </ul> <pre><code>pip install lxml\npip install bs4 # Beautiful Soup\n</code></pre>"},{"location":"web_scrape/#grabbing-html-elements","title":"Grabbing HTML elements","text":"<p>Usage</p> <p>Beautiful Soup HTML Tree Navigation <pre><code># Get web page html content\nresponse = requests.get(\"page_url\")\nraw_html = response.text\n# This returns the html content for the webpage\n# similar to what we see on inspecting the webpage\n# The above content is returned as an unstructured string\n\n# Convert the unstructured string to a structured html content\nstructured_html = bs4.BeautifulSoup(raw_html, \"lxml\")\n\n# Get all elements for a tag\ntag_elements = structured_html.tag_name\ntag_elements.contents\n# This returns a list of all occurences of the tag in the page\n\n# Get all elements for an id\ntag_elements = structured_html.select(\"#id_name\")\n\n# Get all elements for a class\n# If the class name has a space, replace it with a dot in the select statement\ntag_elements = structured_html.select(\".class_name\")\n# Get attributes and children for each element\nfor tag_element in tag_elements:\n    tag_element.attrs\n    tag_element.contents   # same as list(tag_element.children)\n\n# Get any elements named &lt;tag2&gt; that are within an element named &lt;tag1&gt;\ntag_elements = structured_html..select('div span')\n\n# Get any elements named &lt;span&gt; that are directly within an element named &lt;div&gt;, with no other element in between\ntag_elements = structured_html..select('div &gt; span')\n\n# Get the content of the first occurence of the tag\ntag_content = tag_elements[0].getText()\n</code></pre></p> Sample Code <pre><code>import requests\nimport bs4\nimport re\n\nresponse = requests.get(\"https://en.wikipedia.org/wiki/Sholay\")\nraw_html = response.text\n\nstructured_html = bs4.BeautifulSoup(raw_html, \"lxml\")\ntag_elements = structured_html.title\n# returns [&lt;title&gt;Sholay - Wikipedia&lt;/title&gt;]\n\ntag_content = tag_elements.contents[0]\n# tag_elements[0].getText() and tag_elements[0].text also return the same result as above\n# returns 'Sholay - Wikipedia'\n\n# Get list of all items with class \"mw-heading\"\nclass_elements = structured_html.select(\".mw-heading\")\nfor textval in class_elements:\n    print(textval.text)\n</code></pre>"}]}